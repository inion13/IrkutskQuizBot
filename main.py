import logging
import random
import os
import asyncio
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ —Ñ–∞–∫—Ç—ã
from questions import questions
from irkutskfacts import facts

logging.basicConfig(level=logging.INFO)

load_dotenv()

router = Router()

bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher()

# –ö–Ω–æ–ø–∫–∏
start_button = InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å", callback_data="start")
fact_button = InlineKeyboardButton(text="–ü–æ–∫–∞–∂–∏ –º–Ω–µ —Ñ–∞–∫—Ç", callback_data="fact")
quiz_button = InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∫–≤–∏–∑", callback_data="quiz")
stop_button = InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop")
start_keyboard = InlineKeyboardMarkup(inline_keyboard=[[start_button]])

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [fact_button, quiz_button],
    [stop_button]
])

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –±–∞–ª–ª–æ–≤
user_scores = {}  # user_id -> int
user_states = {}  # user_id -> int (–∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞)
user_question_variants = {}  # user_id -> {question_index -> [shuffled options]}
user_question_order = {}  # user_id -> [–∏–Ω–¥–µ–∫—Å—ã –≤–æ–ø—Ä–æ—Å–æ–≤]


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞

def get_question_keyboard(user_id: int, question_index: int):
    options = questions[question_index]["options"][:]
    random.shuffle(options)
    if user_id not in user_question_variants:
        user_question_variants[user_id] = {}
    user_question_variants[user_id][question_index] = options
    keyboard = [
        [InlineKeyboardButton(text=opt, callback_data=f"quiz_{question_index}_{i}")]
        for i, opt in enumerate(options)
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_praise(score: int) -> str:
    if score == 5:
        return "üåü –í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ! –í—Å–µ 5 –∏–∑ 5 ‚Äî —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–Ω–∞—Ç–æ–∫ –ò—Ä–∫—É—Ç—Å–∫–∞!"
    elif score >= 4:
        return "üëè –û—Ç–ª–∏—á–Ω–æ! –£ —Ç–µ–±—è 4 –∏–∑ 5 ‚Äî –ø–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ!"
    elif score == 3:
        return "üëç –ù–µ–ø–ª–æ—Ö–æ! 3 –∏–∑ 5 ‚Äî —É–∂–µ –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è!"
    elif score == 2:
        return "üôÇ –¢–µ–±–µ –µ—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å."
    else:
        return "üí° –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –ó–∞—Ç–æ —Ç–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å –±–æ–ª—å—à–µ –æ–± –ò—Ä–∫—É—Ç—Å–∫–µ!"


@router.message(Command(commands=['start']))
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –≥–æ—Ä–æ–¥–µ –ò—Ä–∫—É—Ç—Å–∫–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑. "
        "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=main_keyboard
    )


@router.message(Command(commands=['stop']))
async def stop(message: Message):
    await message.answer("–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–ª–∏ "
                         "–ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ!",
                         reply_markup=start_keyboard)


@router.message(Command(commands=['fact']))
async def send_fact(message: Message):
    fact = random.choice(facts)
    await message.answer(fact, reply_markup=main_keyboard)


@router.message(Command(commands=['quiz']))
async def start_quiz(message: Message):
    user_id = message.from_user.id
    user_question_order[user_id] = random.sample(range(len(questions)), 5)
    user_states[user_id] = 0
    user_scores[user_id] = 0
    q_index = user_question_order[user_id][0]
    q = questions[q_index]
    await message.answer(q["question"], reply_markup=get_question_keyboard(user_id, q_index))


@router.message(Command(commands=['score']))
async def show_score(message: Message):
    user_id = message.from_user.id
    score = user_scores.get(user_id, 0)
    await message.answer(f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç: {score}")


@router.callback_query()
async def handle_callback_query(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    command = callback_query.data
    user_id = callback_query.from_user.id

    if user_id not in user_states:
        user_states[user_id] = 0

    if command == "start":
        await start(callback_query.message)
    elif command == "stop":
        await stop(callback_query.message)
    elif command == "fact":
        await send_fact(callback_query.message)
    elif command == "quiz":
        user_question_order[user_id] = random.sample(range(len(questions)), 5)
        user_states[user_id] = 0
        user_scores[user_id] = 0
        q_index = user_question_order[user_id][0]
        await callback_query.message.answer(
            questions[q_index]["question"], reply_markup=get_question_keyboard(user_id, q_index))

    elif command.startswith("quiz_"):
        _, q_index, opt_index = command.split("_")
        q_index = int(q_index)
        opt_index = int(opt_index)
        selected_option = user_question_variants[user_id][q_index][opt_index]
        correct_option = questions[q_index]["answer"]

        if selected_option == correct_option:
            user_scores[user_id] += 1
            await callback_query.message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
        else:
            await callback_query.message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option}")

        user_states[user_id] += 1

        if user_states[user_id] < 5:
            next_q_index = user_question_order[user_id][user_states[user_id]]
            next_q = questions[next_q_index]
            await callback_query.message.answer(
                next_q["question"], reply_markup=get_question_keyboard(user_id, next_q_index))
        else:
            score = user_scores[user_id]
            praise = get_praise(score)
            await callback_query.message.answer(
                f"–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! üéâ\n–¢—ã –Ω–∞–±—Ä–∞–ª {score} –∏–∑ 5 –±–∞–ª–ª–æ–≤.\n{praise}", reply_markup=main_keyboard)

            del user_states[user_id]
            del user_scores[user_id]
            del user_question_variants[user_id]
            del user_question_order[user_id]


async def main():
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
